@implements IAsyncDisposable
@inherits SpaceComponentBase
@inject IJSRuntime JS

@foreach (var handle in resizeHandles())
{
    <div 
         id="@handle.Id" class="@handle.ClassName" 
         @onmousedown="@((e) => OnHandleMouseDown(e, handle.ResizeType))"
         @ontouchstart="@((e) => OnHandleTouchStart(e, handle.ResizeType))"/>
}
<div id="@spaceId" class="@outerClass()">
    <div class="@innerClass()" style="@Style">
        <CascadingValue Value="@space.Id" Name="ParentId" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    SpaceStore store => SpaceStore.Instance(JS);
    SpaceDefinition space;
    string spaceId;
    List<ResizeHandleProps> handles;

    [CascadingParameter(Name = "ParentId")] string ParentId { get; set; }
    [CascadingParameter(Name = "Layer")] int? Layer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        spaceId = Id = Id ?? $"s{Guid.NewGuid().ToString().Replace("-", "").Substring(27)}";
        ZIndex = Layer ?? ZIndex;

        space = store.CreateSpace(ParentId, this, () => { StateHasChanged(); });
        await store.AddSpace(space);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (space != null)
        {
            await store.UpdateSpace(space, this);
        }
    }

    protected async Task OnHandleMouseDown(MouseEventArgs e, ResizeType resizeType)
    {
        await store.StartMouseResize(resizeType, space, e);
    }

    protected async Task OnHandleTouchStart(TouchEventArgs e, ResizeType resizeType)
    {
        await store.StartTouchResize(resizeType, space, e);
    }

    private IEnumerable<string> userClasses => 
        ClassName != null ? ClassName.Split(" ").Select(c => c.Trim()) : Enumerable.Empty<string>();

    private string outerClass()
    {
        List<string> outerClasses = new();
        outerClasses.Add("spaces-space");
        if (space.Children.Any(c => c.Resizing)) {
            outerClasses.Add("spaces-resizing");
        }
        outerClasses.AddRange(userClasses.Select(c => $"{c}-container"));
        return string.Join(" ", outerClasses);
    }

    private string innerClass()
    { 
        List<string> innerClasses = new();
        innerClasses.Add("spaces-space-inner");
        innerClasses.AddRange(userClasses);
        return string.Join(" ", innerClasses);
    }

    private IEnumerable<ResizeHandleProps> resizeHandles()
    {
        List<ResizeHandleProps> handles = new();

        if (space.CanResizeLeft)
        {
            handles.Add(
                new ResizeHandleProps(store, space, ResizeType.Left) {
                    Id = $"{space.Id}-ml",
                    ClassName = "spaces-resize-handle resize-left"
                }
            );
        }

        if (space.CanResizeRight)
        {
            handles.Add(
                new ResizeHandleProps(store, space, ResizeType.Right) {
                    Id = $"{space.Id}-mr",
                    ClassName = "spaces-resize-handle resize-right"
                }
            );
        }

        if (space.CanResizeTop)
        {
            handles.Add(
                new ResizeHandleProps(store, space, ResizeType.Top) {
                    Id = $"{space.Id}-mt",
                    ClassName = "spaces-resize-handle resize-top"
                }
            );
        }

        if (space.CanResizeBottom)
        {
            handles.Add(
                new ResizeHandleProps(store, space, ResizeType.Bottom) {
                    Id = $"{space.Id}-mb",
                    ClassName = "spaces-resize-handle resize-bottom"
                }
            );
        }

        return handles;
    }

    public async ValueTask DisposeAsync()
    {
        if (space != null)
        {
            await store.RemoveSpace(space);
        }
    }

    public class ResizeHandleProps
    {
        private readonly SpaceStore store;
        private readonly SpaceDefinition space;

        public ResizeHandleProps(SpaceStore store, SpaceDefinition space, ResizeType resizeType)
        {
            this.store = store ?? throw new ArgumentNullException(nameof(store));
            this.space = space ?? throw new ArgumentNullException(nameof(space));
            this.ResizeType = resizeType;
        }

        public ResizeType ResizeType { get; set; }
        public string Id { get; set; }
        public string ClassName { get; set; }
    }
}